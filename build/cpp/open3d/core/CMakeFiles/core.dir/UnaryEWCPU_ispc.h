//
// /home/runner/work/Open3D/Open3D/build/cpp/open3d/core/CMakeFiles/core.dir//UnaryEWCPU_ispc.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif

#ifndef __ISPC_STRUCT_TensorRef__
#define __ISPC_STRUCT_TensorRef__
struct TensorRef {
    void * data_ptr_;
    int64_t ndims_;
    int64_t dtype_byte_size_;
    int64_t shape_[10];
    int64_t byte_strides_[10];
};
#endif

#ifndef __ISPC_STRUCT_Indexer__
#define __ISPC_STRUCT_Indexer__
struct Indexer {
    int64_t num_inputs_;
    int64_t num_outputs_;
    struct TensorRef inputs_[10];
    struct TensorRef outputs_[2];
    bool inputs_contiguous_[10];
    bool outputs_contiguous_[2];
    int64_t master_shape_[10];
    int64_t master_strides_[10];
    int64_t ndims_;
};
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void CPUAbsElementKernel_bool(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUAbsElementKernel_double(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUAbsElementKernel_float(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUAbsElementKernel_int16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUAbsElementKernel_int32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUAbsElementKernel_int64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUAbsElementKernel_int8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUAbsElementKernel_uint16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUAbsElementKernel_uint32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUAbsElementKernel_uint64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUAbsElementKernel_uint8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCeilElementKernel_bool(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCeilElementKernel_double(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCeilElementKernel_float(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCeilElementKernel_int16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCeilElementKernel_int32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCeilElementKernel_int64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCeilElementKernel_int8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCeilElementKernel_uint16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCeilElementKernel_uint32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCeilElementKernel_uint64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCeilElementKernel_uint8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCosElementKernel_bool(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCosElementKernel_double(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCosElementKernel_float(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCosElementKernel_int16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCosElementKernel_int32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCosElementKernel_int64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCosElementKernel_int8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCosElementKernel_uint16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCosElementKernel_uint32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCosElementKernel_uint64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUCosElementKernel_uint8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUExpElementKernel_bool(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUExpElementKernel_double(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUExpElementKernel_float(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUExpElementKernel_int16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUExpElementKernel_int32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUExpElementKernel_int64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUExpElementKernel_int8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUExpElementKernel_uint16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUExpElementKernel_uint32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUExpElementKernel_uint64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUExpElementKernel_uint8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUFloorElementKernel_bool(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUFloorElementKernel_double(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUFloorElementKernel_float(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUFloorElementKernel_int16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUFloorElementKernel_int32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUFloorElementKernel_int64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUFloorElementKernel_int8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUFloorElementKernel_uint16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUFloorElementKernel_uint32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUFloorElementKernel_uint64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUFloorElementKernel_uint8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUIsNanElementKernel_bool(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUIsNanElementKernel_double(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUIsNanElementKernel_float(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUIsNanElementKernel_int16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUIsNanElementKernel_int32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUIsNanElementKernel_int64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUIsNanElementKernel_int8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUIsNanElementKernel_uint16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUIsNanElementKernel_uint32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUIsNanElementKernel_uint64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUIsNanElementKernel_uint8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_bool(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_bool_bool(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_bool_double(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_bool_float(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_bool_int16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_bool_int32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_bool_int64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_bool_int8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_bool_uint16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_bool_uint32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_bool_uint64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_bool_uint8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_double(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_float(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_int16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_int32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_int64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_int8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_uint16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_uint32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_uint64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPULogicalNotElementKernel_uint8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUNegElementKernel_bool(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUNegElementKernel_double(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUNegElementKernel_float(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUNegElementKernel_int16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUNegElementKernel_int32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUNegElementKernel_int64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUNegElementKernel_int8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUNegElementKernel_uint16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUNegElementKernel_uint32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUNegElementKernel_uint64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUNegElementKernel_uint8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPURoundElementKernel_bool(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPURoundElementKernel_double(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPURoundElementKernel_float(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPURoundElementKernel_int16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPURoundElementKernel_int32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPURoundElementKernel_int64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPURoundElementKernel_int8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPURoundElementKernel_uint16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPURoundElementKernel_uint32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPURoundElementKernel_uint64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPURoundElementKernel_uint8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSinElementKernel_bool(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSinElementKernel_double(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSinElementKernel_float(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSinElementKernel_int16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSinElementKernel_int32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSinElementKernel_int64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSinElementKernel_int8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSinElementKernel_uint16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSinElementKernel_uint32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSinElementKernel_uint64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSinElementKernel_uint8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSqrtElementKernel_bool(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSqrtElementKernel_double(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSqrtElementKernel_float(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSqrtElementKernel_int16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSqrtElementKernel_int32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSqrtElementKernel_int64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSqrtElementKernel_int8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSqrtElementKernel_uint16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSqrtElementKernel_uint32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSqrtElementKernel_uint64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUSqrtElementKernel_uint8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUTruncElementKernel_bool(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUTruncElementKernel_double(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUTruncElementKernel_float(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUTruncElementKernel_int16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUTruncElementKernel_int32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUTruncElementKernel_int64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUTruncElementKernel_int8_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUTruncElementKernel_uint16_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUTruncElementKernel_uint32_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUTruncElementKernel_uint64_t(int64_t start, int64_t end, struct Indexer * arg1);
    extern void CPUTruncElementKernel_uint8_t(int64_t start, int64_t end, struct Indexer * arg1);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
